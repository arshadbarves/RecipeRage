using Core.Characters;
using Gameplay.Cooking;
using UI;
using UnityEditor;
using UnityEngine;
using Unity.Netcode;

namespace RecipeRage.Editor
{
    /// <summary>
    /// Generates prefabs for the RecipeRage game.
    /// </summary>
    public class PrefabGenerator
    {
        /// <summary>
        /// Generate prefabs for the game.
        /// </summary>
        /// <param name="outputPath">The output path for the generated prefabs.</param>
        /// <param name="ingredientsPath">The path to the ingredient assets.</param>
        public void GeneratePrefabs(string outputPath, string ingredientsPath)
        {
            // Note: Station prefabs are now generated by StationGenerator
            // GenerateStationPrefabs(outputPath);

            // Generate player prefab
            GeneratePlayerPrefab(outputPath);

            // Generate UI prefabs
            GenerateUIPrefabs(outputPath);

            // Generate order manager prefab
            GenerateOrderManagerPrefab(outputPath);

            Debug.Log("Generated all prefabs successfully.");
        }

        /// <summary>
        /// Generate player prefab.
        /// </summary>
        /// <param name="outputPath">The output path for the generated prefabs.</param>
        private void GeneratePlayerPrefab(string outputPath)
        {
            string playerPath = $"{outputPath}/Player";

            // Create player object
            GameObject player = GameObject.CreatePrimitive(PrimitiveType.Capsule);
            player.name = "Player";

            // Add required components
            PlayerController playerController = player.AddComponent<PlayerController>();
            player.AddComponent<NetworkObject>();

            // Add rigidbody
            Rigidbody rigidbody = player.GetComponent<Rigidbody>();
            if (rigidbody == null)
            {
                rigidbody = player.AddComponent<Rigidbody>();
            }
            rigidbody.constraints = RigidbodyConstraints.FreezeRotation;
            rigidbody.collisionDetectionMode = CollisionDetectionMode.Continuous;

            // Create model object
            GameObject model = GameObject.CreatePrimitive(PrimitiveType.Cube);
            model.name = "Model";
            model.transform.SetParent(player.transform);
            model.transform.localPosition = new Vector3(0, 0, 0.3f);
            model.transform.localScale = new Vector3(0.5f, 0.5f, 0.5f);

            // Create item hold point
            GameObject holdPoint = new GameObject("ItemHoldPoint");
            holdPoint.transform.SetParent(player.transform);
            holdPoint.transform.localPosition = new Vector3(0, 0.5f, 0.8f);

            // Set references
            SerializedObject serializedObject = new SerializedObject(playerController);
            serializedObject.FindProperty("_modelTransform").objectReferenceValue = model.transform;
            serializedObject.FindProperty("_itemHoldPoint").objectReferenceValue = holdPoint.transform;
            serializedObject.ApplyModifiedProperties();

            // Save the prefab
            string playerPrefabPath = $"{playerPath}/Player.prefab";
            PrefabUtility.SaveAsPrefabAsset(player, playerPrefabPath);
            GameObject.DestroyImmediate(player);

            Debug.Log("Generated player prefab.");
        }

        /// <summary>
        /// Generate UI prefabs.
        /// </summary>
        /// <param name="outputPath">The output path for the generated prefabs.</param>
        private void GenerateUIPrefabs(string outputPath)
        {
            string uiPath = $"{outputPath}/UI";

            // Create order item prefab
            GameObject orderItem = new GameObject("OrderItem");
            orderItem.AddComponent<RectTransform>();
            orderItem.AddComponent<OrderUIItem>();

            // Save the prefab
            string orderItemPath = $"{uiPath}/OrderItem.prefab";
            PrefabUtility.SaveAsPrefabAsset(orderItem, orderItemPath);
            GameObject.DestroyImmediate(orderItem);

            Debug.Log("Generated UI prefabs.");
        }

        /// <summary>
        /// Generate order manager prefab.
        /// </summary>
        /// <param name="outputPath">The output path for the generated prefabs.</param>
        private void GenerateOrderManagerPrefab(string outputPath)
        {
            // Create order manager object
            GameObject orderManager = new GameObject("OrderManager");
            orderManager.AddComponent<OrderManager>();
            orderManager.AddComponent<NetworkObject>();

            // Save the prefab
            string orderManagerPath = $"{outputPath}/OrderManager.prefab";
            PrefabUtility.SaveAsPrefabAsset(orderManager, orderManagerPath);
            GameObject.DestroyImmediate(orderManager);

            Debug.Log("Generated order manager prefab.");
        }
    }
}
